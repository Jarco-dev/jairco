generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Guilds {
  id                 Int                  @id @default(autoincrement())
  discordId          String               @unique
  Users              Users[]
  Roles              Roles[]
  Groups             Groups[]
  Cringes            Cringes[]
  CountingStats      CountingStats[]
  Settings           GuildSettings[]
  Blacklists         Blacklists[]
  CalendarEvents     CalendarEvents[]
  WordSnakeStats     WordSnakeStats[]
  UsedWordSnakeWords UsedWordSnakeWords[]
}

model Users {
  id                    Int              @id @default(autoincrement())
  discordId             String           @unique
  createdAt             DateTime         @default(now())
  updatedAt             DateTime         @updatedAt
  Guilds                Guilds[]
  Groups                Groups[]
  CringesReceived       Cringes[]        @relation(name: "Cringes_userToUser")
  CringesGiven          Cringes[]        @relation(name: "Cringes_byUserToUser")
  CountingStats         CountingStats[]
  BlacklistsReceived    Blacklists[]     @relation(name: "Blacklists_userToUser")
  BlacklistsGiven       Blacklists[]     @relation(name: "Blacklists_byUserToUser")
  CreatedCalendarEvents CalendarEvents[]
  WordSnakeStats        WordSnakeStats[]
}

model Roles {
  id        Int      @id @default(autoincrement())
  discordId String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  guildId   Int
  Guild     Guilds   @relation(fields: [guildId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  Groups    Groups[]
}

model Groups {
  id          Int      @id @default(autoincrement())
  name        String
  permissions BigInt   @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  guildId     Int
  Guild       Guilds   @relation(fields: [guildId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  Users       Users[]
  Roles       Roles[]
}

model Cringes {
  id               Int      @id @default(autoincrement())
  channelId        String?
  messageId        String?  @unique
  messageContent   String?  @db.Text
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  guildId          Int
  Guild            Guilds   @relation(fields: [guildId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  receivedByUserId Int
  ReceivedByUser   Users    @relation(name: "Cringes_userToUser", fields: [receivedByUserId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  givenByUserId    Int
  GivenByUser      Users    @relation(name: "Cringes_byUserToUser", fields: [givenByUserId], references: [id], onUpdate: Cascade, onDelete: Cascade)
}

model CountingStats {
  id               Int      @id @default(autoincrement())
  guildIdAndUserId String   @unique // This is used to allow for easier connectOrCreate queries
  correct          Int      @default(0)
  incorrect        Int      @default(0)
  highest          Int      @default(0)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  guildId          Int
  Guild            Guilds   @relation(fields: [guildId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  userId           Int
  User             Users    @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
}

enum BlacklistTypes {
  COUNTING
}

model Blacklists {
  id                Int            @id @default(autoincrement())
  type              BlacklistTypes
  reason            String?        @db.Text
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  guildIdUserIdType String         @unique // Used to ensure only 1 blacklist per case exists
  guildId           Int
  Guild             Guilds         @relation(fields: [guildId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  receivedByUserId  Int
  ReceivedByUser    Users          @relation(name: "Blacklists_userToUser", fields: [receivedByUserId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  givenByUserId     Int
  GivenByUser       Users          @relation(name: "Blacklists_byUserToUser", fields: [givenByUserId], references: [id], onUpdate: Cascade, onDelete: Cascade)
}

enum GuildSetting {
  COUNTING_ENABLED
  COUNTING_CHANNEL
  HIGHEST_COUNT
  CURRENT_COUNT
  CURRENT_COUNT_USER
  CRINGE_ENABLED
  CALENDAR_ENABLED
  CALENDAR_AUTO_DELETE
  WORD_SNAKE_ENABLED
  WORD_SNAKE_CHANNEL
  HIGHEST_WORD_SNAKE
  CURRENT_WORD
  CURRENT_WORD_USER
  CURRENT_WORD_SNAKE
}

model GuildSettings {
  id             Int          @id @default(autoincrement())
  guildIdAndType String       @unique // This is used to allow for easier connectOrCreate queries
  type           GuildSetting
  value          String
  guildId        Int?
  Guild          Guilds?      @relation(fields: [guildId], references: [id], onUpdate: Cascade, onDelete: Cascade)
}

model CalendarEvents {
  id              Int       @id @default(autoincrement())
  date            String
  description     String
  organisers      String
  endDate         DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  guildId         Int
  Guild           Guilds    @relation(fields: [guildId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  createdByUserId Int
  createdByUser   Users     @relation(fields: [createdByUserId], references: [id], onUpdate: Cascade, onDelete: Cascade)
}

model WordSnakeStats {
  id               Int      @id @default(autoincrement())
  guildIdAndUserId String   @unique // This is used to allow for easier connectOrCreate queries
  correct          Int      @default(0)
  incorrect        Int      @default(0)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  guildId          Int
  Guild            Guilds   @relation(fields: [guildId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  userId           Int
  User             Users    @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
}

model UsedWordSnakeWords {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  guildId   Int
  Guild     Guilds   @relation(fields: [guildId], references: [id], onUpdate: Cascade, onDelete: Cascade)
}
